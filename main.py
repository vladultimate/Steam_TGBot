import sqlite3
import aiohttp
import asyncio
import re
import telebot
from telebot import types
import threading
from fake_useragent import UserAgent
from send_gmails import send_email, process_email_input


async def get_currency_rate(currency_code='USD'):
    url = 'https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            for currency in data:
                if currency['ccy'] == currency_code:
                    return float(currency['sale'])


async def get_skinprice(link):
    headers = {'User-Agent': user_agent.random}
    async with aiohttp.ClientSession() as session:
        match = re.search(r"market/listings/\d+/(.*?)\?", link)
        if match:
            market_hash_name = match.group(1).rstrip('/')
            price_url = f"https://steamcommunity.com/market/priceoverview/?appid=730&market_hash_name={market_hash_name}"
            async with session.get(price_url, headers=headers) as response:
                data = await response.json()
                if "lowest_price" in data:
                    price = data["lowest_price"]
                    price = float(price.replace("$", ''))
                    exchange_rate = await get_currency_rate('USD')  
                    return round(price * exchange_rate)
TOKEN_INFO = ''
bot = telebot.TeleBot(f"{TOKEN_INFO}")

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

user_agent = UserAgent()


@bot.message_handler(commands=['start'])
def handle_start(message):
    cursor.execute("SELECT * FROM users WHERE chat_id = ?", (message.chat.id,))
    user_data = cursor.fetchone()

    referred_by = None
    if len(message.text.split()) > 1 and user_data is None:
        referred_by = message.text.split()[1]
        cursor.execute("SELECT * FROM users WHERE chat_id = ?", (referred_by,))
        referrer = cursor.fetchone()

        if referrer:
            cursor.execute("INSERT INTO users (username, chat_id, referred_by) VALUES (?, ?, ?)", 
                           (message.from_user.username, message.chat.id, referred_by))
            conn.commit()

            cursor.execute("UPDATE users SET referrals = referrals + 1, max_lots = max_lots + 1 WHERE chat_id = ?", 
                           (referred_by,))
            conn.commit()
        else:
            cursor.execute("INSERT INTO users (username, chat_id, referred_by) VALUES (?, ?, ?)", 
                           (message.from_user.username, message.chat.id, None))
            conn.commit()
    elif user_data is None:
        cursor.execute("INSERT INTO users (username, chat_id, referred_by) VALUES (?, ?, ?)", 
                       (message.from_user.username, message.chat.id, None))
        conn.commit()
    
    cursor.execute("SELECT * FROM skins WHERE user_id = ?", (message.chat.id,))
    user_skins = cursor.fetchall()

    welcome_message = (
    f"üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, <b>@{message.from_user.username}</b>! üåü\n\n"
    "–Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –æ–±–º—ñ–Ω–æ–º –≤–∞—à–∏—Ö —ñ–≥—Ä–æ–≤–∏—Ö —Å–∫—ñ–Ω—ñ–≤ üéÆ.\n\n"
    "üîÑ –í–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–∫—ñ–Ω–∏ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —á–∏ –ø—Ä–æ–¥–∞–∂—É. –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    )

    bot.send_message(message.chat.id, welcome_message, reply_markup=update_keyboard(message), parse_mode='html')


@bot.message_handler(content_types=['text'])
def handle_action(message):
    user_data = cursor.fetchone()
    if message.text == 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è':
        referral_code = message.chat.id
        
        cursor.execute("SELECT referrals FROM users WHERE chat_id = ?", (message.chat.id,))
        referrals_count = cursor.fetchone()[0]

        referral_link = f"https://t.me/SteamMarket_FindPricer_bot?start={referral_code}"
        
        if referrals_count and referrals_count > 0:
            referral_message = f"üë• <b>–í–∏ –≤–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏:</b> {referrals_count} –¥—Ä—É–∑—ñ–≤!"
        else:
            referral_message = (
                "üôÅ <b>–í–∏ —â–µ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞.</b>\n"
                "–ê–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏! –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏!"
            )

        bot.send_message(
            message.chat.id, 
            f"üîó <b>–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n"
            f"üì© <code>{referral_link}</code>\n\n"
            f"{referral_message}\n"
            f"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏:\n"
            "üéâ –ë—ñ–ª—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö ‚Äî –±—ñ–ª—å—à–µ –ª–æ—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤!",
            parse_mode='html'
        )

    if message.text == 'üõí –î–æ–¥–∞—Ç–∏ —Å–∫—ñ–Ω':
        
        cursor.execute("SELECT id, max_lots FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        if user_data is None:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")                                                                            
            return
        user_id, max_lots = user_data
        cursor.execute("SELECT COUNT(*) FROM skins WHERE user_id = ?", (user_id,))
        active_skins_count = cursor.fetchone()[0]

        if active_skins_count >= max_lots:
            bot.send_message(message.chat.id, f"‚ùå –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É ({max_lots}) –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∫—ñ–Ω—ñ–≤.")
        else:
            cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
            user_data = cursor.fetchone()
            user_id = user_data[0]
            cursor.execute("UPDATE skins SET paused = 1 WHERE user_id = ?", (user_id,))
            conn.commit()
            bot.send_message(message.chat.id, 'üîó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–∏–Ω—å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à —Ç–æ–≤–∞—Ä.')
            bot.register_next_step_handler(message, process_skin_url, user_id)

    if message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ':
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("DELETE FROM skins WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, 'üóëÔ∏è –í–∞—à—ñ –ª–æ—Ç–∏ –æ—á–∏—â–µ–Ω–æ!', reply_markup=update_keyboard(message))

    if message.text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–©–æ —Ä–æ–±–∏—Ç—å —Ü–µ–π –±–æ—Ç? –î–ª—è —á–æ–≥–æ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å?", callback_data='whats_doing_this_bot')
        item2 = types.InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥‚Ü©Ô∏è", callback_data='Return_to_default')
        markup.row(item1)
        markup.row(item2)
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É: ', reply_markup=markup)

    if message.text == '‚ö†Ô∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É': 
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("UPDATE skins SET paused = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, 'üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à E-mail –¥–ª—è –∑–≤‚Äô—è–∑–∫—É –∑ –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏:')
        bot.register_next_step_handler(message, process_email_input)

    if message.text == '‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥':
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("UPDATE skins SET is_active = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚è∏Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.", reply_markup=update_keyboard(message))

    if message.text == '‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥':
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("UPDATE skins SET is_active = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚ñ∂Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.", reply_markup=update_keyboard(message))


def process_skin_url(message, user_id):
    if 'https://steamcommunity.com/market/listings/' in message.text:
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (message.chat.id,))
        user_data = cursor.fetchone()
        user_ids = user_data[0]
        cursor.execute("SELECT is_active FROM skins WHERE user_id = ?", (user_ids,))
        is_active = cursor.fetchall()
        if any(row[0] == 0 for row in is_active):
            cursor.execute("INSERT INTO skins (user_id, skin_url, is_active) VALUES (?, ?, ?)", 
                       (user_id, message.text, 0))
        else:
            cursor.execute("INSERT INTO skins (user_id, skin_url, is_active) VALUES (?, ?, ?)", 
                       (user_id, message.text, 1))
        conn.commit()
        bot.send_message(
            message.chat.id, 
            'üåü<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –≤ –≥—Ä–∏–≤–Ω—è—Ö:</b>\n'
            '|<i>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ü—ñ–Ω—É, —è–∫—É –≤–∏ –≤–≤–æ–¥–∏—Ç–µ. –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏, –≤–≤–æ–¥—å—Ç–µ —Ü—ñ–Ω—É, –ø—Ä–∏ —è–∫—ñ–π —ñ –≤–∏—â–µ –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è. –î–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É, –∑–∞ —è–∫—É —ñ –Ω–∏–∂—á–µ –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</i>|', 
            parse_mode='html'
        )
        bot.register_next_step_handler(message, process_price, user_id)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, process_skin_url, user_id)


def process_price(message, user_id):
    if message.text.isdigit():
        price = int(message.text)
        cursor.execute("UPDATE skins SET price = ? WHERE user_id = ? AND price IS NULL", 
                       (price, user_id))
        conn.commit()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        sell_button = types.KeyboardButton("üõç –ü—Ä–æ–¥–∞—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ")
        buy_button = types.KeyboardButton("üõí –ö—É–ø–∏—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ")
        markup.add(sell_button, buy_button)

        bot.send_message(message.chat.id, '‚úÖ –°–∫—ñ–Ω –¥–æ–¥–∞–Ω–æ! –©–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ –∑ –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º?', reply_markup=markup)
        bot.register_next_step_handler(message, process_action, user_id)
    else:
        bot.send_message(message.chat.id, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, process_price, user_id)


def update_keyboard(message):
    cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
    user_data = cursor.fetchone()
    user_id = user_data[0]
    cursor.execute("SELECT skin_url FROM skins WHERE user_id = ?", (user_id,))
    user_skins = cursor.fetchall()
    cursor.execute("SELECT is_active FROM skins WHERE user_id = ?", (user_id,))

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    try:
        if user_skins[0][0]:
            is_active = cursor.fetchall()[0][0]
            if is_active:
                item_pause = types.KeyboardButton("‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
                markup.add(item_pause)
            else:
                item_resume = types.KeyboardButton("‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
                markup.add(item_resume)
    except:
        pass
    item1 = types.KeyboardButton("üõí –î–æ–¥–∞—Ç–∏ —Å–∫—ñ–Ω")
    item2 = types.KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞")
    item3 = types.KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
    item4 = types.KeyboardButton("‚ö†Ô∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É")
    markup.add(item1, item2)
    markup.add(item3)
    markup.add(item4)
    try:
        if user_skins[0][0]:
            markup.add(types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ"))
    except:
        pass
        
    return markup


def process_action(message, user_id):
    if message.text == 'üõç –ü—Ä–æ–¥–∞—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ':
        cursor.execute("UPDATE skins SET action = 'sell' WHERE user_id = ? AND action IS NULL", 
                       (user_id,))
        conn.commit()
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("UPDATE skins SET paused = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, 'üí∏ –í–∞—à —Å–∫—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–æ–¥–∞–∂—É!', reply_markup=update_keyboard(message))
    elif message.text == 'üõí –ö—É–ø–∏—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ':
        cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
        user_data = cursor.fetchone()
        user_id = user_data[0]
        cursor.execute("UPDATE skins SET paused = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        cursor.execute("UPDATE skins SET action = 'buy' WHERE user_id = ? AND action IS NULL", 
                       (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, 'üõçÔ∏è –í–∞—à —Å–∫—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ –∫—É–ø—ñ–≤–ª—ñ!', reply_markup=update_keyboard(message))
    else:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, process_action, user_id)

def process_email_input(message):
    user_email = message.text  
    bot.send_message(message.chat.id, '–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
    bot.register_next_step_handler(message, process_help_request, user_email)

def process_help_request(message, user_email):
    problem = message.text 

    email_thread = threading.Thread(target=send_email, args=("SteamBot Helper", f"–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ –ø–æ–≤–æ–¥—É: ||{problem}|| —Å–∫–æ—Ä–æ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ, —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É —Å–∫—Ä–∏–Ω—å–∫—É", user_email))
    email_thread.start()

    cursor.execute("SELECT id FROM users WHERE username = ?", (message.from_user.username,))
    user_data = cursor.fetchone()
    user_id = user_data[0]
    cursor.execute("UPDATE skins SET paused = 0 WHERE user_id = ?", (user_id,))
    conn.commit()

    bot.send_message(message.chat.id, 'üìß–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.', parse_mode='html', reply_markup=update_keyboard(message))

@bot.callback_query_handler(func=lambda call: True)
def questions_answers(call):
    if call.data == 'Return_to_default':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        welcome_message = (
            f"<i>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ‚¨áÔ∏è</i>"
        )  
        bot.send_message(call.message.chat.id, welcome_message, reply_markup=update_keyboard(call), parse_mode='html')
        
    if call.data == 'FAQ':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–©–æ —Ä–æ–±–∏—Ç—å —Ü–µ–π –±–æ—Ç? –î–ª—è —á–æ–≥–æ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å?", callback_data='whats_doing_this_bot')
        item2 = types.InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥‚Ü©Ô∏è", callback_data='Return_to_default')
        markup.row(item1)
        markup.row(item2)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É: ", parse_mode='html', reply_markup=markup)

    if call.data == 'whats_doing_this_bot':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å‚Ü©Ô∏è", callback_data='FAQ')
        markup.row(item1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–¶–µ–π –±–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ Steam –º–∞—Ä–∫–µ—Ç—ñ —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –ø—Ä–æ –∑–º—ñ–Ω–∏ –≤ —Ü—ñ–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤–∞—à–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é<i>(–ü—Ä–æ–¥–∞—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ, –ö—É–ø–∏—Ç–∏ –≤–∏–≥—ñ–¥–Ω—ñ—à–µ).</i>", parse_mode='html', reply_markup=markup)

def main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üõí –î–æ–¥–∞—Ç–∏ —Å–∫—ñ–Ω")
    item3 = types.KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ")
    markup.row(item1)
    markup.row(item3)
    return markup

async def custom_checks():
    while True:
        cursor.execute("""
            SELECT u.chat_id, s.skin_url, s.price, s.action, s.last_price_message_id 
            FROM skins s 
            JOIN users u ON s.user_id = u.id 
            WHERE s.action IS NOT NULL AND s.is_active = 1 AND s.paused = 0
        """)
        skins = cursor.fetchall()
        
        for skin in skins:
            chat_id, skin_url, price, action, last_price_message_id = skin
            if skin_url is None:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—ñ–Ω.")
                continue
            try:
                current_price = await get_skinprice(skin_url)
                if current_price is not None:
                    if last_price_message_id:
                        try:
                            bot.delete_message(chat_id, last_price_message_id)
                        except Exception as e:
                            print(f"{e}")
                    if action == 'buy' and price > current_price:
                        print(skin_url)
                        new_message = bot.send_message(chat_id, f"üîª –ó–Ω–∏–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏! –í–∞—à —Å–∫—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ {current_price}‚Ç¥! –ö—É–ø—É–π—Ç–µ —Ç—É—Ç: [üõí –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–æ–≤–∞—Ä]({skin_url})", parse_mode='Markdown')
                    elif action == 'sell' and price < current_price:
                        new_message = bot.send_message(chat_id, f"üí∏ –í–∞—à —Å–∫—ñ–Ω –ø–æ–¥–æ—Ä–æ–∂—á–∞–≤ –¥–æ {current_price}‚Ç¥! [üñ±Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–æ–≤–∞—Ä]({skin_url})", parse_mode='Markdown')
                    cursor.execute("UPDATE skins SET last_price_message_id = ? WHERE skin_url = ?", 
                                   (new_message.message_id, skin_url))
                    conn.commit()
            except Exception as e:
                print(e)
        await asyncio.sleep(20)

def bot_polling():
    bot.polling(none_stop=True)

def main():
    bot_thread = threading.Thread(target=bot_polling)
    bot_thread.daemon = True
    bot_thread.start()

    asyncio.run(custom_checks())

if __name__ == '__main__':
    main()
